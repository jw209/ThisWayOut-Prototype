//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""ControllerInput"",
            ""id"": ""d3fca754-ff0b-4784-82a4-a358d96e1e62"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0b45b617-af48-4ea9-8d9f-b4bd0a345d85"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cast"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3bf521a3-870f-41ff-8272-a559c086dc0c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""adeb5e9c-b72b-4230-8dae-00dd8d6f957b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""feeb7047-2263-41dc-807d-aaf53d27519f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchSpell"",
                    ""type"": ""Button"",
                    ""id"": ""4c1fdcb1-6a8a-48c8-bb49-ddfffe60dcc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4dcb1fb7-6241-4fa0-97ee-2b70549249f2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1038e17c-e235-4193-ba11-93ea584157dc"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71f12c79-14b7-408e-a6b9-f74814f52840"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e223f23-d3e2-43ab-b8e2-4603813b1385"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daf44e98-ccae-4260-89ab-b465255f8d31"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SwitchSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ControllerInput
        m_ControllerInput = asset.FindActionMap("ControllerInput", throwIfNotFound: true);
        m_ControllerInput_Move = m_ControllerInput.FindAction("Move", throwIfNotFound: true);
        m_ControllerInput_Cast = m_ControllerInput.FindAction("Cast", throwIfNotFound: true);
        m_ControllerInput_Attack = m_ControllerInput.FindAction("Attack", throwIfNotFound: true);
        m_ControllerInput_Dash = m_ControllerInput.FindAction("Dash", throwIfNotFound: true);
        m_ControllerInput_SwitchSpell = m_ControllerInput.FindAction("SwitchSpell", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControllerInput
    private readonly InputActionMap m_ControllerInput;
    private List<IControllerInputActions> m_ControllerInputActionsCallbackInterfaces = new List<IControllerInputActions>();
    private readonly InputAction m_ControllerInput_Move;
    private readonly InputAction m_ControllerInput_Cast;
    private readonly InputAction m_ControllerInput_Attack;
    private readonly InputAction m_ControllerInput_Dash;
    private readonly InputAction m_ControllerInput_SwitchSpell;
    public struct ControllerInputActions
    {
        private @Controls m_Wrapper;
        public ControllerInputActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ControllerInput_Move;
        public InputAction @Cast => m_Wrapper.m_ControllerInput_Cast;
        public InputAction @Attack => m_Wrapper.m_ControllerInput_Attack;
        public InputAction @Dash => m_Wrapper.m_ControllerInput_Dash;
        public InputAction @SwitchSpell => m_Wrapper.m_ControllerInput_SwitchSpell;
        public InputActionMap Get() { return m_Wrapper.m_ControllerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerInputActions set) { return set.Get(); }
        public void AddCallbacks(IControllerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerInputActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Cast.started += instance.OnCast;
            @Cast.performed += instance.OnCast;
            @Cast.canceled += instance.OnCast;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @SwitchSpell.started += instance.OnSwitchSpell;
            @SwitchSpell.performed += instance.OnSwitchSpell;
            @SwitchSpell.canceled += instance.OnSwitchSpell;
        }

        private void UnregisterCallbacks(IControllerInputActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Cast.started -= instance.OnCast;
            @Cast.performed -= instance.OnCast;
            @Cast.canceled -= instance.OnCast;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @SwitchSpell.started -= instance.OnSwitchSpell;
            @SwitchSpell.performed -= instance.OnSwitchSpell;
            @SwitchSpell.canceled -= instance.OnSwitchSpell;
        }

        public void RemoveCallbacks(IControllerInputActions instance)
        {
            if (m_Wrapper.m_ControllerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerInputActions @ControllerInput => new ControllerInputActions(this);
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IControllerInputActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCast(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnSwitchSpell(InputAction.CallbackContext context);
    }
}
